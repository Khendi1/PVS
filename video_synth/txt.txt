
# def reset_slider_callback(sender, app_data, user_data):
#     print(f"Got reset callback for {user_data}")
#     s = get_slider_by_tag(user_data)
#     s.value = s.min_value
#     dpg.set_value(user_data, s.min_value)

#   Returns:
#     The mapped value.
#   """
#   # Calculate the proportion of the value within the original range
#   proportion = (value - from_min) / (from_max - from_min)

#   # Map the proportion to the target range
#   mapped_value = to_min + proportion * (to_max - to_min)

#   return floor(mapped_value)

# def on_save_button_click():
    
#     date_time_str = datetime.now().strftime("%m-%d-%Y %H-%M")
#     print(f"Saving values at {date_time_str}")
    
#     # Prepare the data to save
#     data = {
#         "timestamp": date_time_str,
#         "hue_shift": hue_shift,
#         "sat_shift": sat_shift,
#         "val_shift": val_shift,
#         "alpha": alpha,
#         "num_glitches": num_glitches,
#         "glitch_size": glitch_size,
#         "val_threshold": val_threshold,
#         "val_hue_shift": val_hue_shift,
#         "blur_kernel_size": blur_kernel_size,
#         "x_shift": x_shift,
#         "y_shift": y_shift,
#     }
    
#     # Append the data to the YAML file
#     with open("saved_values.yaml", "a") as f:
#         yaml.dump([data], f, default_flow_style=False)
    
#     # Optionally, save the modified image
#     cv2.imwrite(f"{date_time_str}.jpg", feedback_frame)

# def on_fwd_button_click():
#     global hue_shift, sat_shift, val_shift, alpha, num_glitches, glitch_size
#     global val_threshold, val_hue_shift, blur_kernel_size, x_shift, y_shift

#     fwd = get_button_by_tag("load_next")
#     prev = get_button_by_tag("load_prev")
#     print(f"Forward button clicked!")

#     # get values from saved_values.yaml
#     try:
#         with open("saved_values.yaml", "r") as f:
#             saved_values = list(yaml.safe_load_all(f))

#         fwd.index = (fwd.index + 1) % len(saved_values[0])
#         prev.index = fwd.index
#         d = saved_values[0][fwd.index]
#         print(f"loaded values at index {fwd.index}: {d}\n\n")
        
#         for s in sliders:
#             for tag in d.keys():
#                 if tag == s.tag:
#                     s.value = d[tag]
#                     dpg.set_value(s.tag, s.value)
        
#     except Exception as e:
#         print(f"Error loading values: {e}")

# def on_prev_button_click():
#     global hue_shift, sat_shift, val_shift, alpha, num_glitches, glitch_size
#     global val_threshold, val_hue_shift, blur_kernel_size, x_shift, y_shift

#     fwd = get_button_by_tag("load_next")
#     b = get_button_by_tag("load_prev")
#     print(f"Prev button clicked!")

#     # get values from saved_values.yaml
#     try:
#         with open("saved_values.yaml", "r") as f:
#             saved_values = list(yaml.safe_load_all(f))

#         b.index = (b.index - 1) % len(saved_values[0])
#         fwd.index = b.index
#         d = saved_values[0][b.index]
#         print(f"loaded values at index {b.index}: {d}\n\n")
        
#         for s in sliders:
#             for tag in d.keys():
#                 if tag == s.tag:
#                     s.value = d[tag]
#                     dpg.set_value(s.tag, s.value)
        
#     except Exception as e:
#         print(f"Error loading values: {e}")

# def on_rand_button_click():
#     global hue_shift, sat_shift, val_shift, alpha, num_glitches, glitch_size
#     global val_threshold, val_hue_shift, blur_kernel_size, x_shift, y_shift

#     fwd = get_button_by_tag("load_next")
#     prev = get_button_by_tag("load_prev")
#     rand = get_button_by_tag("load_rand")
#     print(f"Random button clicked!")
   
#     # get values from saved_values.yaml
#     try:
#         with open("saved_values.yaml", "r") as f:
#             saved_values = list(yaml.safe_load_all(f))

#         rand.index = random.randint(0, len(saved_values[0]) - 1)
#         fwd.index = rand.index
#         prev.index = rand.index
#         d = saved_values[0][rand.index]
#         print(f"loaded values at index {rand.index}: {d}\n\n")
        
#         for s in sliders:
#             for tag in d.keys():
#                 if tag == s.tag:
#                     s.value = d[tag]
#                     dpg.set_value(s.tag, s.value)
        
#     except Exception as e:
#         print(f"Error loading values: {e}")

# def reset_values():
#     global sliders
#     for s in sliders:
#         s.value = s.min_value
#         if s.tag == "x_shift" or s.tag == "y_shift":
#             s.value = 0
#         dpg.set_value(s.tag, s.value)

# def randomize_values():
#     global sliders
#     for s in sliders:
#         if s.tag == "blur_kernel":
#             s.value = max(1, random.randint(1, s.max_value) | 1)
#         elif s.tag == "x_shift":
#             s.value = random.randint(-image_width, image_width)
#         elif s.tag == "y_shift":
#             s.value = random.randint(-image_height, image_height)
#         elif s.tag == "glitch_size":
#             s.value = random.randint(1, s.max_value)
#         elif s.tag == 'feedback':
#             s.value = random.uniform(0.0, 1.0)
#         else:
#             s.value = random.randint(s.min_value, s.max_value)
#         dpg.set_value(s.tag, s.value)

# def create_trackbars():
#     global hue_shift, sat_shift, val_shift
#     global alpha, num_glitches, glitch_size, blur_kernel_size
#     global x_speed, y_speed, x_size, y_size
#     global x_shift, y_shift
#     global val_threshold, val_hue_shift
#     global image_width, image_height
#     global sliders
#     global perlin_amplitude, perlin_frequency, perlin_octaves

#     hue_slider = SliderRow("Hue Shift", "hue_shift", hue_shift, 0, 180, slider_callback, 'int', reset_slider_callback)
#     sat_slider = SliderRow("Sat Shift", "sat_shift", sat_shift, 0, 255, slider_callback, 'int', reset_slider_callback)
#     val_slider = SliderRow("Val Shift", "val_shift", val_shift, 0, 255, slider_callback, 'int', reset_slider_callback)
#     alpha_slider = SliderRow("Feedback", "feedback", alpha, 0.0, 1.0, slider_callback, 'float', reset_slider_callback)
#     num_glitches_slider = SliderRow("Glitch Qty", "glitch_qty", num_glitches, 0, 100, slider_callback, 'int', reset_slider_callback)
#     glitch_size_slider = SliderRow("Glitch Size", "glitch_size", glitch_size, 1, 100, slider_callback, 'int', reset_slider_callback)
#     val_threshold_slider = SliderRow("Val Threshold", "val_threshold", val_threshold, 0, 255, slider_callback, 'int', reset_slider_callback)
#     val_hue_shift_slider = SliderRow("Hue Shift for Val", "hue_val_shift", val_hue_shift, 0, 180, slider_callback, 'int', reset_slider_callback)
#     blur_kernel_slider = SliderRow("Blur Kernel", "blur_kernel", blur_kernel_size, 0, 100, slider_callback, 'int', reset_slider_callback)
#     x_shift_slider = SliderRow("X Shift", "x_shift", x_shift, -image_width//2, image_width//2, slider_callback, 'int', reset_slider_callback)
#     y_shift_slider = SliderRow("Y Shift", "y_shift", y_shift, -image_height//2, image_height//2, slider_callback, 'int', reset_slider_callback)
#     perlin_amplitude_slider = SliderRow("Perlin Amplitude", "perlin_amplitude", perlin_amplitude, 0, 100, slider_callback, 'int', reset_slider_callback)
#     perlin_frequency_slider = SliderRow("Perlin Frequency", "perlin_frequency", perlin_frequency, 0, 100, slider_callback, 'int', reset_slider_callback)
#     perlin_octaves_slider = SliderRow("Perlin Octaves", "perlin_octaves", perlin_octaves, 0, 100, slider_callback, 'int', reset_slider_callback)


#     sliders = [hue_slider, sat_slider, val_slider, alpha_slider, num_glitches_slider, glitch_size_slider, 
#                val_threshold_slider, val_hue_shift_slider, blur_kernel_slider, x_shift_slider, y_shift_slider,
#                perlin_amplitude_slider, perlin_frequency_slider, perlin_octaves_slider]

    
#     # sliders = [hue_slider, sat_slider, val_slider, alpha_slider, num_glitches_slider, glitch_size_slider, 
#     #            val_threshold_slider, val_hue_shift_slider, blur_kernel_slider, x_shift_slider, y_shift_slider]

# def on_button_click(sender, app_data, user_data):
#     print(f"Button clicked: {user_data}, {app_data}, {sender}")
#     # Perform action based on button click
#     if user_data == "save":
#         on_save_button_click()
#     elif user_data == "reset_all":
#         reset_values()
#     elif user_data == "random":
#         randomize_values()
#     elif user_data == "load_next":
#         on_fwd_button_click()
#     elif user_data == "load_prev":
#         on_prev_button_click()
#     elif user_data == "load_rand":
#         on_rand_button_click()

# def create_buttons(width, height):
#     global buttons

#     save_button = Button("Save", "save")
#     reset_button = Button("Reset all", 'reset_all')
#     random_button = Button("Random", 'random')
#     load_next_button = Button("Load >>", 'load_next')
#     load_rand_button = Button("Load ??", "load_rand")
#     load_prev_button = Button("Load <<", "load_prev")
#     interp_button = Button("Interp >>", "interp")
#     fade_button = Button("Fade", "fade")
#     perlin_button = Button("Perlin On", "perlin_on")

#     buttons = [save_button, reset_button, random_button, load_next_button, load_rand_button, load_prev_button, interp_button, fade_button, perlin_button]

#     width -= 20
#     with dpg.group(horizontal=True):
#         dpg.add_button(label=save_button.label, callback=on_button_click, user_data=save_button.tag, width=width//3)
#         dpg.add_button(label=reset_button.label, callback=on_button_click, user_data=reset_button.tag, width=width//3)
#         dpg.add_button(label=random_button.label, tag=random_button.tag, callback=on_button_click, user_data=random_button.tag, width=width//3)

#     with dpg.group(horizontal=True):
#         dpg.add_button(label=load_prev_button.label, callback=on_button_click, user_data=load_prev_button.tag, width=width//3)
#         dpg.add_button(label=load_rand_button.label, callback=on_button_click, user_data=load_rand_button.tag, width=width//3)    
#         dpg.add_button(label=load_next_button.label, callback=on_button_click, user_data=load_next_button.tag, width=width//3)


#     with dpg.group(horizontal=True):
#         dpg.add_button(label="Interp", callback=on_button_click, user_data="interp", width=width//3)
#         dpg.add_button(label="Fade", callback=on_button_click, user_data="fade", width=width//3)    
#         dpg.add_button(label="Perlin On", callback=on_button_click, user_data="perlin_on", width=width//3)
#     # future buttons: load image, reload image, max feedback, undo, redo, save image

# def resize_buttons(sender, app_data):
#     # Get the current width of the window
#     window_width = dpg.get_item_width("Controls")
    
#     # Set each button to half the window width (minus a small padding if you want)
#     half_width = window_width // 2
#     dpg.set_item_width(sender, half_width)
#     # dpg.set_item_width("button2", half_width)
